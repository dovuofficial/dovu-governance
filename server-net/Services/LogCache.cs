using System.Collections.Concurrent;
using VotingStreamServer.Models;

namespace VotingStreamServer.Services;
/// <summary>
/// Maintains an internal list of the latest 250 log entries generated by this system.
/// </summary>
public class LogCache
{
    /// <summary>
    /// Queue holding the cached log entries.
    /// </summary>
    private readonly ConcurrentQueue<LogEntry> _events = new();
    /// <summary>
    /// Adds a new log entry to the queue, may evict an old entry if the 
    /// list grows beyond 250 entries.
    /// </summary>
    /// <param name="categoryName">
    /// Category name assigned to the log entry.
    /// </param>
    /// <param name="logLevel">
    /// The identified level for the log entry.
    /// </param>
    /// <param name="message">
    /// The message contents of the entry.
    /// </param>
    public void Add(string categoryName, LogLevel logLevel, string message)
    {
        _events.Enqueue(new(categoryName, logLevel, message));
        if (_events.Count > 250)
        {
            _events.TryDequeue(out _);
        }
    }
    /// <summary>
    /// Retrieves a copy of the current log entries stored in memory.
    /// </summary>
    /// <returns>
    /// A list of log entries as it exists at the time of the method call.
    /// </returns>
    public LogEntry[] Get()
    {
        return _events.ToArray();
    }
}
